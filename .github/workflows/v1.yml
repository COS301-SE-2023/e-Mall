name: v1

on:
  push:
    branches:
      - master
      - develop
      - JY/82/E2E-into-pipeline
  pull_request:
    branches:
      - master
      - develop

jobs:
  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: v18.16.0

      - name: Get node version
        id: node
        run: |
          echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Create env files
        run: |
          echo "${{secrets.APP_ENV_TS}}" > ./app/src/environments/env.ts
          echo "${{secrets.APP_ENV_PROD_TS}}" > ./app/src/environments/env.prod.ts

      - name: Check if env files exists
        run: |
          if [ ! -f ./app/src/environments/env.ts ]; then
            echo "app.env not found!"
            exit 1
          fi

          if [ ! -f ./app/src/environments/env.prod.ts ]; then
            echo "app.env.prod not found!"
            exit 1
          fi

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          # Adding node version as cache key
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}

      - name: Install dependencies
        if: steps.node_modules.outputs.cache-hit != 'true'
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: Lint Code
        working-directory: ./app
        run: yarn lint

      - name: Build project
        working-directory: ./app
        run: yarn build

  backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "${{ secrets.API_ENV}}" > ./api/api/.env
          echo "${{ secrets.API_ENV_PROD}}" > ./api/api/env.prod

      - name: Check if env files exists
        run: |
          if [ ! -f ./api/api/.env ]; then
            echo "api.env not found!"
            exit 1
          fi

          if [ ! -f ./api/api/env.prod ]; then
            echo "api.env.prod not found!"
            exit 1
          fi
      - name: Run Docker Compose Up
        run: |
          chmod +x api/docker-entrypoint.sh && docker-compose up -d

      - name: Backend Unit Tests
        working-directory: api
        run: docker-compose exec -T api pytest

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: api/coverage.xml

  sonarcloud:
    name: SonarCloud analysis
    needs: [frontend, backend]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: api/

      - name: Change dir in report
        run: sed -i "s|<source>\/api</source>|<source>api\/<\/source>|g" api/coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codecov:
    name: Codecov
    needs: [frontend, backend]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage-report
          path: ./api/

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml

  # start-django:
  #   name: Django
  #   # needs: [frontend, backend]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Create .env file
  #       run: |
  #         echo "${{ secrets.API_ENV}}" > ./api/api/.env
  #         echo "${{ secrets.API_ENV_PROD}}" > ./api/api/env.prod

  #     - name: Check if env files exists
  #       run: |
  #         if [ ! -f ./api/api/.env ]; then
  #           echo "api.env not found!"
  #           exit 1
  #         fi

  #         if [ ! -f ./api/api/env.prod ]; then
  #           echo "api.env.prod not found!"
  #           exit 1
  #         fi
  #     - name: Run Docker Compose Up
  #       run: chmod +x api/docker-entrypoint.sh && docker-compose up -d

  # start-angular:
  #   name: Angular
  #   needs: [backend, frontend]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Start Angular server
  #       run: ng serve --port 4200 --configuration=development &

  cypress-e2e:
    name: Cypress E2E
    # needs: [start-django, start-angular]
    # needs: [backend, frontend]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: start django
        run: chmod +x api/docker-entrypoint.sh && docker-compose up -d

      - name: start angular
        working-directory: ./app
        run: yarn install && yarn ng serve --port 4200 --configuration=development

      - name: start cypress
        working-directory: ./app
        run: cypress run

        # with:
        #   install: false

      # add front unit tests
