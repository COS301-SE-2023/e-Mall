name: deploy

on:
  push:
    branches: master

jobs:
  build_and_push:
    strategy:
      matrix:
        include:
          - service: frontend
            directory: app
            dockerfile: Dockerfile
          - service: backend
            directory: api
            dockerfile: Dockerfile.prod

    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          if [ "${{ matrix.service }}" == "frontend" ]; then
            echo '' > ./app/src/environments/env.ts
            echo "${{secrets.APP_ENV_PROD_TS}}" > ./app/src/environments/env.prod.ts
          else
            cat > ./api/api/env.prod <<EOL
            ${{ secrets.API_ENV_PROD }}
            EOL
          fi

      - name: create-json
        if: matrix.service == 'backend'
        id: create-json
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "./api/api/serviceAccountKey.json"
          json: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container
        run: doctl registry login --expiry-seconds 600

      - name: Build and push
        working-directory: ./${{ matrix.directory }}
        run: |
          docker build -f ${{ matrix.dockerfile }} -t ${{ matrix.service }} .
          docker tag ${{ matrix.service }} registry.digitalocean.com/e-mall/${{ matrix.service }}
          docker push registry.digitalocean.com/e-mall/${{ matrix.service }}

  garbage_collection:
    runs-on: ubuntu-latest
    environment: prod
    needs: build_and_push
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container
        run: doctl registry login --expiry-seconds 600

      - name: Garbage collection
        run: |
          # Check if there is an active garbage collection
          ACTIVE_GC=$(doctl registry garbage-collection get-active e-mall --format Status --no-header 2>/dev/null || echo "")     

          # If there is no active garbage collection, start a new one
          if [ "$ACTIVE_GC" == "" ]; then
            doctl registry garbage-collection start e-mall --include-untagged-manifests --force
          fi
